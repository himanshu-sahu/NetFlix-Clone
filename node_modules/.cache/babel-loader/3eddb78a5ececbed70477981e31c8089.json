{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\react-start\\\\netflix-clone\\\\src\\\\Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport YouTube from \"react-youtube\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base_url = \"http://image.tmdb.org/t/p/original/\";\n\nfunction Row({\n  title,\n  fetchUrl,\n  islargeRow\n}) {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useSt;\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl); // console.log(request.data.results);\n\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      // https://developers.google.com/youtube/player_parameters\n      autoplay: 1\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"row_title\",\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row_posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        className: `row_poster ${islargeRow && \"row_large\"}`,\n        src: `${base_url}${islargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 16\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: trailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Row, \"MO6b3PSP3RIUqZ8gtSrBZBVtBbs=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["D:/React/react-start/netflix-clone/src/Row.js"],"names":["React","useState","useEffect","axios","YouTube","base_url","Row","title","fetchUrl","islargeRow","movies","setMovies","trailerUrl","setTrailerUrl","useSt","fetchData","request","get","data","results","opts","height","width","playerVars","autoplay","map","movie","poster_path","backdrop_path","name","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,WAAP;AACA,OAAOC,OAAP,MAAoB,eAApB;;AAEA,MAAMC,QAAQ,GAAG,qCAAjB;;AAEA,SAASC,GAAT,CAAa;AAAEC,EAAAA,KAAF;AAASC,EAAAA,QAAT;AAAmBC,EAAAA;AAAnB,CAAb,EAA8C;AAAA;;AAC3C,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACW,UAAD,EAAYC,aAAZ,IAA6BC,KAAnC;AAEAZ,EAAAA,SAAS,CAAC,MAAM;AACb,mBAAea,SAAf,GAA2B;AACxB,YAAMC,OAAO,GAAG,MAAMb,KAAK,CAACc,GAAN,CAAUT,QAAV,CAAtB,CADwB,CAExB;;AACAG,MAAAA,SAAS,CAACK,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOH,OAAP;AACF;;AACDD,IAAAA,SAAS;AACX,GARQ,EAQN,CAACP,QAAD,CARM,CAAT;AAUA,QAAMY,IAAI,GAAG;AACVC,IAAAA,MAAM,EAAE,KADE;AAEVC,IAAAA,KAAK,EAAE,MAFG;AAGVC,IAAAA,UAAU,EAAE;AACT;AACAC,MAAAA,QAAQ,EAAE;AAFD;AAHF,GAAb;AASA,sBACG;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACG;AAAI,MAAA,SAAS,EAAC,WAAd;AAAA,gBAA2BjB;AAA3B;AAAA;AAAA;AAAA;AAAA,YADH,eAEG;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,gBACIG,MAAM,CAACe,GAAP,CAAYC,KAAD,iBACT;AAEG,QAAA,SAAS,EAAG,cAAajB,UAAU,IAAI,WAAY,EAFtD;AAGG,QAAA,GAAG,EAAG,GAAEJ,QAAS,GAAEI,UAAU,GAAGiB,KAAK,CAACC,WAAT,GAAuBD,KAAK,CAACE,aAAc,EAH3E;AAIG,QAAA,GAAG,EAAEF,KAAK,CAACG;AAJd,SACQH,KAAK,CAACI,EADd;AAAA;AAAA;AAAA;AAAA,cADF;AADJ;AAAA;AAAA;AAAA;AAAA,YAFH,eAYG,QAAC,OAAD;AAAS,MAAA,OAAO,EAAElB,UAAlB;AAA8B,MAAA,IAAI,EAAEQ;AAApC;AAAA;AAAA;AAAA;AAAA,YAZH;AAAA;AAAA;AAAA;AAAA;AAAA,UADH;AAgBF;;GAvCQd,G;;KAAAA,G;AAyCT,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport \"./Row.css\";\r\nimport YouTube from \"react-youtube\";\r\n\r\nconst base_url = \"http://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({ title, fetchUrl, islargeRow }) {\r\n   const [movies, setMovies] = useState([]);\r\n   const [trailerUrl,setTrailerUrl] = useSt\r\n\r\n   useEffect(() => {\r\n      async function fetchData() {\r\n         const request = await axios.get(fetchUrl);\r\n         // console.log(request.data.results);\r\n         setMovies(request.data.results);\r\n         return request;\r\n      }\r\n      fetchData();\r\n   }, [fetchUrl]);\r\n\r\n   const opts = {\r\n      height: \"390\",\r\n      width: \"100%\",\r\n      playerVars: {\r\n         // https://developers.google.com/youtube/player_parameters\r\n         autoplay: 1,\r\n      },\r\n   };\r\n\r\n   return (\r\n      <div className=\"row\">\r\n         <h2 className=\"row_title\">{title}</h2>\r\n         <div className=\"row_posters\">\r\n            {movies.map((movie) => (\r\n               <img\r\n                  key={movie.id}\r\n                  className={`row_poster ${islargeRow && \"row_large\"}`}\r\n                  src={`${base_url}${islargeRow ? movie.poster_path : movie.backdrop_path}`}\r\n                  alt={movie.name}\r\n               />\r\n            ))}\r\n         </div>\r\n         <YouTube videoId={trailerUrl} opts={opts} />\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default Row;\r\n"]},"metadata":{},"sourceType":"module"}