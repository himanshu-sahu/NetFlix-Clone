{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/Himanshu/Desktop/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/Himanshu/Desktop/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:/Users/Himanshu/Desktop/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import axios from\"./axios\";import\"./Row.css\";import YouTube from\"react-youtube\";import movieTrailer from'movie-trailer';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var base_url=\"http://image.tmdb.org/t/p/original/\";function Row(_ref){var title=_ref.title,fetchUrl=_ref.fetchUrl,islargeRow=_ref.islargeRow;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),movies=_useState2[0],setMovies=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),trailerUrl=_useState4[0],setTrailerUrl=_useState4[1];useEffect(function(){function fetchData(){return _fetchData.apply(this,arguments);}function _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var request;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return axios.get(fetchUrl);case 2:request=_context.sent;// console.log(request.data.results);\nsetMovies(request.data.results);return _context.abrupt(\"return\",request);case 5:case\"end\":return _context.stop();}}},_callee);}));return _fetchData.apply(this,arguments);}fetchData();},[fetchUrl]);var opts={height:\"390\",width:\"100%\",playerVars:{// https://developers.google.com/youtube/player_parameters\nautoplay:1}};var handleClick=function handleClick(movie){if(trailerUrl){setTrailerUrl(\"\");}else{movieTrailer((movie===null||movie===void 0?void 0:movie.name)||\"\").then(function(url){var urlParams=new URLSearchParams(new URL(url).search);// 'https://www.youtube.com/embed/' + id + '?showinfo=0&enablejsapi=1&origin=http://localhost:9000\nsetTrailerUrl(urlParams.get(\"v\"));}).catch(function(error){return console.log(error);});}};return/*#__PURE__*/_jsxs(\"div\",{className:\"row\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"row_title\",children:title}),/*#__PURE__*/_jsx(\"div\",{className:\"row_posters\",children:movies.map(function(movie){return/*#__PURE__*/_jsx(\"img\",{onClick:function onClick(){return handleClick(movie);},className:\"row_poster \".concat(islargeRow&&\"row_large\"),src:\"\".concat(base_url).concat(islargeRow?movie.poster_path:movie.backdrop_path),alt:movie.name},movie.id);})}),trailerUrl&&/*#__PURE__*/_jsx(YouTube,{videoId:trailerUrl,opts:opts})]});}export default Row;","map":{"version":3,"sources":["C:/Users/Himanshu/Desktop/netflix-clone/src/Row.js"],"names":["React","useState","useEffect","axios","YouTube","movieTrailer","base_url","Row","title","fetchUrl","islargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","get","request","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","map","poster_path","backdrop_path","id"],"mappings":"udAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,MAAO,WAAP,CACA,MAAOC,CAAAA,OAAP,KAAoB,eAApB,CACA,MAAOC,CAAAA,YAAP,KAAyB,eAAzB,C,wFAEA,GAAMC,CAAAA,QAAQ,CAAG,qCAAjB,CAEA,QAASC,CAAAA,GAAT,MAA8C,IAA/BC,CAAAA,KAA+B,MAA/BA,KAA+B,CAAxBC,QAAwB,MAAxBA,QAAwB,CAAdC,UAAc,MAAdA,UAAc,CAC3C,cAA4BT,QAAQ,CAAC,EAAD,CAApC,wCAAOU,MAAP,eAAeC,SAAf,eACA,eAAoCX,QAAQ,CAAC,EAAD,CAA5C,yCAAOY,UAAP,eAAmBC,aAAnB,eAEAZ,SAAS,CAAC,UAAM,SACEa,CAAAA,SADF,qIACb,qKACyBZ,CAAAA,KAAK,CAACa,GAAN,CAAUP,QAAV,CADzB,QACSQ,OADT,eAEG;AACAL,SAAS,CAACK,OAAO,CAACC,IAAR,CAAaC,OAAd,CAAT,CAHH,gCAIUF,OAJV,wDADa,4CAObF,SAAS,GACX,CARQ,CAQN,CAACN,QAAD,CARM,CAAT,CAUA,GAAMW,CAAAA,IAAI,CAAG,CACVC,MAAM,CAAE,KADE,CAEVC,KAAK,CAAE,MAFG,CAGVC,UAAU,CAAE,CACT;AACAC,QAAQ,CAAE,CAFD,CAHF,CAAb,CASA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,KAAD,CAAW,CAC5B,GAAIb,UAAJ,CAAgB,CACbC,aAAa,CAAC,EAAD,CAAb,CACF,CAFD,IAEO,CACJT,YAAY,CAAC,CAAAqB,KAAK,OAAL,EAAAA,KAAK,SAAL,QAAAA,KAAK,CAAEC,IAAP,GAAe,EAAhB,CAAZ,CACIC,IADJ,CACS,SAACC,GAAD,CAAS,CACZ,GAAMC,CAAAA,SAAS,CAAG,GAAIC,CAAAA,eAAJ,CAAoB,GAAIC,CAAAA,GAAJ,CAAQH,GAAR,EAAaI,MAAjC,CAAlB,CACA;AACAnB,aAAa,CAACgB,SAAS,CAACd,GAAV,CAAc,GAAd,CAAD,CAAb,CACF,CALJ,EAMIkB,KANJ,CAMU,SAACC,KAAD,QAAWC,CAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAAX,EANV,EAOF,CACH,CAZD,CAaA,mBACG,aAAK,SAAS,CAAC,KAAf,wBACG,WAAI,SAAS,CAAC,WAAd,UAA2B3B,KAA3B,EADH,cAEG,YAAK,SAAS,CAAC,aAAf,UACIG,MAAM,CAAC2B,GAAP,CAAW,SAACZ,KAAD,qBACT,YAEG,OAAO,CAAE,yBAAMD,CAAAA,WAAW,CAACC,KAAD,CAAjB,EAFZ,CAGG,SAAS,sBAAgBhB,UAAU,EAAI,WAA9B,CAHZ,CAIG,GAAG,WAAKJ,QAAL,SAAgBI,UAAU,CAAGgB,KAAK,CAACa,WAAT,CAAuBb,KAAK,CAACc,aAAvD,CAJN,CAKG,GAAG,CAAEd,KAAK,CAACC,IALd,EACQD,KAAK,CAACe,EADd,CADS,EAAX,CADJ,EAFH,CAaI5B,UAAU,eAAI,KAAC,OAAD,EAAS,OAAO,CAAEA,UAAlB,CAA8B,IAAI,CAAEO,IAApC,EAblB,GADH,CAiBF,CAED,cAAeb,CAAAA,GAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport \"./Row.css\";\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from 'movie-trailer';\r\n\r\nconst base_url = \"http://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({ title, fetchUrl, islargeRow }) {\r\n   const [movies, setMovies] = useState([]);\r\n   const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n   useEffect(() => {\r\n      async function fetchData() {\r\n         const request = await axios.get(fetchUrl);\r\n         // console.log(request.data.results);\r\n         setMovies(request.data.results);\r\n         return request;\r\n      }\r\n      fetchData();\r\n   }, [fetchUrl]);\r\n\r\n   const opts = {\r\n      height: \"390\",\r\n      width: \"100%\",\r\n      playerVars: {\r\n         // https://developers.google.com/youtube/player_parameters\r\n         autoplay: 1,\r\n      },\r\n   };\r\n\r\n   const handleClick = (movie) => {\r\n      if (trailerUrl) {\r\n         setTrailerUrl(\"\");\r\n      } else {\r\n         movieTrailer(movie?.name || \"\")\r\n            .then((url) => {\r\n               const urlParams = new URLSearchParams(new URL(url).search);\r\n               // 'https://www.youtube.com/embed/' + id + '?showinfo=0&enablejsapi=1&origin=http://localhost:9000\r\n               setTrailerUrl(urlParams.get(\"v\"));\r\n            })\r\n            .catch((error) => console.log(error));\r\n      }\r\n   };\r\n   return (\r\n      <div className=\"row\">\r\n         <h2 className=\"row_title\">{title}</h2>\r\n         <div className=\"row_posters\">\r\n            {movies.map((movie) => (\r\n               <img\r\n                  key={movie.id}\r\n                  onClick={() => handleClick(movie)}\r\n                  className={`row_poster ${islargeRow && \"row_large\"}`}\r\n                  src={`${base_url}${islargeRow ? movie.poster_path : movie.backdrop_path}`}\r\n                  alt={movie.name}\r\n               />\r\n            ))}\r\n         </div>\r\n         {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default Row;\r\n"]},"metadata":{},"sourceType":"module"}